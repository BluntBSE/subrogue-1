

DONT FORGET:

You currently set speed pretty directly in apply_entity_type. You'll have to change this once different speeds are at hing.

We're making the find/attack target stuff generic to promote npc interactions,
but I think something like a "player bias" would be helpful, that is
skewing interactions towards interacting with the player vs npcs,
but not so much the player can't bamboozle the AI.



BUG: 
    Left click not moving the entity as expected.

QUEUE:
    Fix left click movement bug
    Make a function: create_waypoint_away_from(target, distance)
    Make the NPC run away based on that function
    
    VISION:
        Entities have LISTENER CAMERAS that register to any EMITTER node that's in LOS.
        The EMITTER NODE broadcasts signals. SoundSignal, VisualSignal, etc.
        SoundSignal = Hz, Db.
        VIsualSignal = Dist only (Unless we implement camoflauge)
        The range of this camera is equal to the biggest of among the vessel's detection modes (sonar, visual, whatever)
        
        Entity LISTENER CAMERAS have the following values:
        Sensitivity: The smallest DB value that will render a signal marker. E.g: 20db.
        Certainty-100 (C100): The range at which a sound source can be positively identified and tracked
        Certainty-falloff: Expressed as percent/km, the rate at which certainty falls from C-100
        Range: The absolute max range at which signals will be captured, usually very high, may not be worth showing to the player
        
        So, when a listener sees an emitter within its range, it subscribes to emission events
        It calculates, based on the range, what the DB is by the time it would reach the listener
        If the DB is at the sensitivity or greater, create a signal marker and associate it 1) with the entity/player doing the spotting and 2) with the entity that emitted the signal
        If the DB comes from a signal that has already been positively identified (a marker for the entity exists for this player)
        It retains that information. The marker had all that information populated even if it was hidden during the period
        Where the entity was actively tracked (fully visible in real time)
        
        Anyway, if that signal falls under the C-100 threshold, calculate the remaining certainty
        Place the signal marker on the map with a visual representation of the margin of error. 
        Update that marker's position every so often (or maybe make it move smoothly with the originating entity)
        Allow players to update the signal marker with information
        
        AREA ENTERED should be on the all entities layer, but the RAYCAST should include terrain.
    
    
Remember to add active sonar target profile and passive hz to  UI instead
    


IDEAS:
    
    MUNITIONS - Maybe we shouldn't add_child at runtime, but reveal munitions from an offscreen pool?
    MUNITIONS - DO THEY OVERRIDE THEIR CHECK WAYPOINT REACHED AND JUST KEEP GOING?

    
    Sounds (and other emissions) are achieved by creating a large 3d shape around the emitter,
    where the edge of the shape represents the smallest unit detectable (such as 1DB)
    This large 3D shape clips with the terrain.
    If an entity with a LISTENING flag is within the shape, it measures its distance from the emitter across the curve of the sphere.
    With that distance. Given the POWER of the signal and the SENSITIVITY of the listener, do the following:
    
    If Signal POWER is within the SENSITIVITY limit of the listener, create a SignalDetectedNode.
    
    Signal detected nodes do not positively identify the object, but provide a node to pathfind to. Perhaps some variance is introduced to the position of the node based on sensitivity.
    A SignalDetectedNode knows what it's parented to, so updates to a SignalDetectedNode are tracked to the object they belong to.
    
    
    For the player, the player must choose to save these nodes to the screen, else they disappear after a certain amount of time.
    
    
    
