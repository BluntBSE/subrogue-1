





'M" to toggle between following the playerentity and free-look

Popups need to have a size set to be proportional with camera distance (with caps, ofc)



QUEUE:
    FIX ENTITY INHERITING SPOTLIGHT ETC.

Create a Muniition object.
properties:
    fired from
    heading to
    type ENUM { torpedo, missile}
    guidance_type ENUM { active, wireguide, passive, dumb}
    radius
    range
    speed
    fuel
    fuel_burn
    depth - array of ENUM {surface, swim, crawl}

    targeting parameters - based on ENUM
    passive:
    turn on after X distance
    max_angle
    target_hz
    <SPECIAL> self pitch hz
    <SPECIAL> variable speed(?)
    sensitivity - how small can you make the hz band   
    active:
    turn on after X distance
    max_angle
    max_range
    ping_frequency
    
    IF BOTH: State at which to switch from active to passive
    
    IF DUMB:
        dumbfire weapons roll up to a point and deploy something like a minefield, a mobile mine, or a chatterer
        
        
    
    IF WIREGUIDE....
    implement later.
    
    
    
    
    
    
Remember to add active sonar target profile and passive hz to  UI instead
    

NOTES:
    Remember that you're using collision masks on the camera, the waypoints, and the clickable sphere.

IDEAS:
    
    Sounds (and other emissions) are achieved by creating a large 3d shape around the emitter,
    where the edge of the shape represents the smallest unit detectable (such as 1DB)
    This large 3D shape clips with the terrain.
    If an entity with a LISTENING flag is within the shape, it measures its distance from the emitter across the curve of the sphere.
    With that distance. Given the POWER of the signal and the SENSITIVITY of the listener, do the following:
    
    If Signal POWER is within the SENSITIVITY limit of the listener, create a SignalDetectedNode.
    
    Signal detected nodes do not positively identify the object, but provide a node to pathfind to. Perhaps some variance is introduced to the position of the node based on sensitivity.
    A SignalDetectedNode knows what it's parented to, so updates to a SignalDetectedNode are tracked to the object they belong to.
    
    
    For the player, the player must choose to save these nodes to the screen, else they disappear after a certain amount of time.
    
    
    
